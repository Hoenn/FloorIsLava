<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
//Movement
grav    = 1;
terminal= 10;
hspd    = 0;
fric    = 3; 
vspd    = 0;
spd     = 9;
jspd    = 13;





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics Step
//Local vars for current keys
var rkey;
var lkey;
var jkey;
if(gamepad_is_connected(0))
{
    rkey = (gamepad_axis_value(0, gp_axislh) &gt;= .5) || gamepad_button_check(0, gp_padr);
    lkey = (gamepad_axis_value(0, gp_axislh) &lt;= -.5) ||gamepad_button_check(0, gp_padl);
    jkey = gamepad_button_check_pressed(0, gp_face1);
}
else //Keyboard
{
    rkey= keyboard_check(vk_right);
    lkey = keyboard_check(vk_left);
    jkey = keyboard_check(vk_space);
}

//Check if offscreen
if(x &gt; room_width || x &lt; 0 || y &gt; room_height || y &lt; 0)
{
    room_restart();
}
//Check ground
if(place_meeting(x, y+1, obj_wall)) 
{
    vspd=0;
    if(jkey)
    {
        vspd = - jspd;
    }
}
else
{
    if(vspd &lt; terminal)
        vspd+=grav;
        
    
}

//Move Right
if(rkey)
{
    if(hspd &lt; spd)
        hspd+=fric;
    else
        hspd = spd;
    
    if(place_meeting(x-1, y, obj_wall) &amp;&amp; !place_meeting(x, y+1, obj_wall) &amp;&amp; !lkey)
    {
        vspd = -jspd;
    }
}

//Move Left
if(lkey)
{
    if(hspd &gt; -spd)
        hspd -= fric;
    else
        hspd = -spd;
    
    if(place_meeting(x+1, y, obj_wall) &amp;&amp; !place_meeting(x, y+1, obj_wall) &amp;&amp; !rkey)
    {
        vspd = -jspd   
    }
}

//Both or no movement keys
if((!rkey &amp;&amp; !lkey) || (rkey &amp;&amp; lkey))
{
    if(hspd != 0)
    {
        if(hspd &lt; 0)
            hspd += fric;
        else
            hspd -= fric;
    }
}

    
//Horizontal Collision
if(place_meeting(x+hspd, y, obj_wall))
{
    while(!place_meeting(x+sign(hspd), y, obj_wall))
    {
        x+=sign(hspd);
    }
    hspd=0;
}

x += hspd;

//Vertical Collisions
if(place_meeting(x, y+vspd, obj_wall))
{
    while(!place_meeting(x, y+sign(vspd), obj_wall))
    {
        y+=sign(vspd);
    }
    vspd=0;
}

y += vspd;




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_endTut">
      <action>
        <libid>1</libid>
        <id>211</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>snd_chckpt</sound>
          </argument>
          <argument>
            <kind>3</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>224</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_another_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>11</kind>
            <room>hello</room>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_outlined(sprite_index, -1, x, y, 1, 1, image_angle, c_gray, c_black);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="81">
      <action>
        <libid>1</libid>
        <id>225</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_previous_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>221</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_previous_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="69">
      <action>
        <libid>1</libid>
        <id>226</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_next_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>222</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_next_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
